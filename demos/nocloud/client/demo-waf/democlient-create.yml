---
- name: Build the Demo Clients
  hosts: demo_clients
  become: True
  vars:
    ansible_python_interpreter: python3      




  tasks:
    - name: archive directory to copy
      archive:
        path:
          - "{{ playbook_dir }}/dockerfile"
          - "{{ playbook_dir }}/interfaces"
          - "{{ playbook_dir }}/netem"
          - "{{ playbook_dir }}/startup.py"
          - "{{ playbook_dir }}/waf/"
          - "{{ playbook_dir }}/vs_demo/"
        dest: "{{ playbook_dir }}/democlient.tgz"
      delegate_to: 127.0.0.1
      when: (inventory_hostname != "localhost")

    - name: copy files
      copy:
        src: "{{ playbook_dir }}/democlient.tgz"
        dest: "./"
        remote_src: no
        force: no
      when: (inventory_hostname != "localhost")

    - name: unarchive files to build container
      unarchive:
        src: democlient.tgz
        dest: .
      when: (inventory_hostname != "localhost")

    - name: build the democlient base image
      docker_image:
        build:
          path: .
        name: democlient
        tag: latest
        source: build
        state: present

    - name: start democlient1 container
      docker_container:
        name: democlient1
        hostname: democlient1
        networks:
           - name: avinet
             ipv4_address: "169.254.63.1"
        purge_networks: yes
        etc_hosts:
            waf.demovip.avi.local: 169.254.10.3
        detach: yes
        log_driver: json-file
        log_options:
            max-size: 1m
        privileged: yes
        restart_policy: always
        state: started
        image: democlient:latest

    - name: start democlient2 container
      docker_container:
        name: democlient2
        hostname: democlient2
        networks:
           - name: avinet
             ipv4_address: "169.254.63.2"
        purge_networks: yes
        etc_hosts:
            waf.demovip.avi.local: 169.254.10.3
        detach: yes
        log_driver: json-file
        log_options:
            max-size: 1m
        privileged: yes
        restart_policy: always
        state: started
        image: democlient:latest

    - name: cleanup remote files
      file:
          path: "{{ item }}"
          state: absent
      with_items:
          - ./democlient.tgz
          - ./dockerfile
          - ./interfaces
          - ./netem
          - ./startup.py
          - ./waf/
          - ./vs_demo/
      when: (inventory_hostname != "localhost")
